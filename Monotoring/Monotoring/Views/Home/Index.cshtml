@using Monotoring.Models;
@model dynamic
    
@{
    ViewBag.Title = "Inicio";
    //List<Monotoring.Models.WorkOrden> lstOrden =  Model[0]() as List<Monotoring.Models.WorkOrden>;
}

<br />
<br />

@*<button onclick="scrollStart()">Iniciar</button>
<button onclick="scrollStop()">Parar</button>*@
<div class="row">
    <div class="col-sm-2 col-sm-offset-10">
        <div class="checkbox">
            <label><input type="checkbox" id="checkMode" onclick="ModeScreen" />Modo de presentación</label>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-4 col-lg-offset-2">
        <div class="panel panel-default">
            <div class="panel-heading">Descripción de colores</div>
            <div class="panel-body">
                <p class="bg-info text-center">Trabajo <strong>finalizado</strong></p>
                <p class="bg-success text-center">Trabajando, <strong>dentro de tiempo</strong></p>
                <p class="bg-warning text-center">Trabajando, <strong>tiempo máximo por alcanzar</strong></p>
                <p class="bg-danger text-center">Trabajando, <strong>fuera de tiempo</strong></p>
            </div>            
        </div>
    </div>
    <div class="col-lg-4">
        <div class="panel panel-default">
            <div class="panel-heading">Descripción de simbolos</div>
            <div class="panel-body">
                <p class="text-center"><span class="glyphicon glyphicon-ok"></span> Dentro de tiempo</p>
                <p class="text-center"><span class="glyphicon glyphicon-exclamation-sign"></span> En el tiempo máximo</p>
                <p class="text-center"><span class="glyphicon glyphicon-remove"></span> Fuera de tiempo</p>
            </div>
        </div>
    </div>
</div>

@*<dvi class="container-fluid">*@
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead >
                <tr class="bg-primary">
                    <th class="text-center">
                        No. catalogo
                    </th>
                    <th class="text-center">
                        Producto
                    </th>
                    <th class="text-center">
                        Orden/Batch
                    </th>
                    <th class="text-center">
                        Ensamble Final
                    </th>
                    <th class="text-center">
                        Calidad
                    </th>
                    <th class="text-center">
                        Logística
                    </th>
                    <th class="text-center">
                        Esterilización
                    </th>
                    <th class="text-center">
                        Liberación QA Final
                    </th>
                    <th class="text-center">
                        Envió P/L
                    </th>
                    <th class="text-center">
                        Días transcurridos
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (WorkCatalog w in Model.WorkOrden)
                {
                    var temp = 0;
                    int dayscount = 0;
                    int daysweekend = 0;
                    <tr>
                        <td class="text-center">@w.Catalog.CatalogNo</td>
                        <td class="text-center">@w.Catalog.CatalogDescrip</td>
                        <td class="text-center">
                            @*@Html.ActionLink(w.WorkOrden.BatchOrden, "Index", "OrdenDetail", new { id = w.WorkOrden.WorkOrdenId },new { @data_toggle = "tooltip", @data_placement = "rigth", @title = "Detalles" })*@                           
                            @*<button type="button" class="btn" data-toggle="modal" data-target="#modalDetail">modal</button>*@
                            <a href="javascript:void(0);" class="showDetail"data-id="@w.WorkOrden.WorkOrdenId">@w.WorkOrden.BatchOrden</a>
                        </td>
                        @foreach (AreaViewModel a in Model.Area_Orden)
                        {
                            var classcolor = "";
                            var icon = "";
                            if (w.WorkOrden.WorkOrdenId == a.Area_Orden.WorkOrdenId)
                            {
                                DateTime lastDate;
                                if (a.Area_Orden.dateFinish != null)
                                {
                                    lastDate = (DateTime)a.Area_Orden.dateFinish;
                                    daysweekend = 0;
                                    classcolor = "info";
                                    dayscount = (int)Math.Round((lastDate - (DateTime)a.Area_Orden.dateStart).TotalDays, 0);
                                    for(DateTime d= (DateTime)a.Area_Orden.dateStart; d <= lastDate; d = d.AddDays(1))
                                    {
                                        if(d.DayOfWeek==DayOfWeek.Saturday || d.DayOfWeek == DayOfWeek.Sunday)
                                        {
                                            daysweekend++;
                                        }
                                    }
                                    dayscount = dayscount - daysweekend;
                                    if (dayscount <= a.Area.daysMax)
                                    {
                                        icon = "glyphicon glyphicon-ok";
                                    }
                                    else
                                    {
                                        icon = "glyphicon glyphicon-remove";
                                    }


                                }
                                else
                                {
                                    lastDate = DateTime.Now;
                                    if (Math.Round((lastDate - (DateTime)a.Area_Orden.dateStart).TotalDays, 0) < a.Area.daysMax)
                                    {
                                        daysweekend = 0;
                                        classcolor = "success";
                                        dayscount = (int)Math.Round((lastDate - (DateTime)a.Area_Orden.dateStart).TotalDays, 0);
                                        for (DateTime d = (DateTime)a.Area_Orden.dateStart; d <= lastDate; d = d.AddDays(1))
                                        {
                                            if (d.DayOfWeek == DayOfWeek.Saturday || d.DayOfWeek == DayOfWeek.Sunday)
                                            {
                                                daysweekend++;
                                            }
                                        }
                                        dayscount = dayscount - daysweekend;
                                        icon = "glyphicon glyphicon-ok";
                                    }
                                    else
                                    {
                                        if (Math.Round((lastDate - (DateTime)a.Area_Orden.dateStart).TotalDays, 0) == a.Area.daysMax)
                                        {
                                            daysweekend = 0;
                                            classcolor = "warning";
                                            dayscount = (int)Math.Round((lastDate - (DateTime)a.Area_Orden.dateStart).TotalDays, 0);
                                            for (DateTime d = (DateTime)a.Area_Orden.dateStart; d <= lastDate; d = d.AddDays(1))
                                            {
                                                if (d.DayOfWeek == DayOfWeek.Saturday || d.DayOfWeek == DayOfWeek.Sunday)
                                                {
                                                    daysweekend++;
                                                }
                                            }
                                            dayscount = dayscount - daysweekend;
                                            icon = "glyphicon glyphicon-exclamation-sign";
                                        }
                                        else
                                        {
                                            if (Math.Round((lastDate - (DateTime)a.Area_Orden.dateStart).TotalDays, 0) >= a.Area.daysMax)
                                            {
                                                daysweekend = 0;
                                                classcolor = "danger";
                                                dayscount = (int)Math.Round((lastDate - (DateTime)a.Area_Orden.dateStart).TotalDays, 0);
                                                for (DateTime d = (DateTime)a.Area_Orden.dateStart; d <= lastDate; d = d.AddDays(1))
                                                {
                                                    if (d.DayOfWeek == DayOfWeek.Saturday || d.DayOfWeek == DayOfWeek.Sunday)
                                                    {
                                                        daysweekend++;
                                                    }
                                                }
                                                dayscount = dayscount - daysweekend;
                                                icon = "glyphicon glyphicon-remove";
                                            }
                                        }
                                    }
                                }




                                switch ((int)a.Area_Orden.AreaId)
                                {
                                    case 1:
                                        <td class="@classcolor text-center">@dayscount<span class="@icon" aria-hidden="true"></span></td>
                                        temp += 1;
                                        break;
                                    case 2:
                                        <td class="@classcolor text-center">@dayscount<span class="@icon" aria-hidden="true"></span></td>
                                        temp += 1;
                                        break;
                                    case 3:
                                        <td class="@classcolor text-center">@dayscount<span class="@icon" aria-hidden="true"></span></td>
                                        temp += 1;
                                        break;
                                    case 4:
                                        <td class="@classcolor text-center">@dayscount<span class="@icon" aria-hidden="true"></span></td>
                                        temp += 1;
                                        break;
                                    case 5:
                                        <td class="@classcolor text-center">@dayscount<span class="@icon" aria-hidden="true"></span></td>
                                        temp += 1;
                                        break;
                                    case 6:
                                        <td class="@classcolor text-center">@dayscount<span class="@icon" aria-hidden="true"></span></td>
                                        temp += 1;
                                        break;
                                }

                            }
                        }
                        @for(int i = 0; i < 6 - temp; i++)
                        {
                            <td class="active text-center">Sin Iniciar</td>
                        }
                        @if (w.WorkOrden.dateStart != null)
                        {
                            int days = (int)(Math.Round((DateTime.Now - (DateTime)w.WorkOrden.dateStart).TotalDays, 0));
                            int weeks = 0;
                            for(DateTime d= (DateTime)w.WorkOrden.dateStart;d<=DateTime.Now;d=d.AddDays(1))
                            {
                                if(d.DayOfWeek==DayOfWeek.Saturday || d.DayOfWeek == DayOfWeek.Sunday)
                                {
                                    weeks++;
                                }
                            }
                            days = days - weeks;
                            if (days < 10)
                            {
                                <td class="success text-center">@days</td>
                            }
                            else
                            {

                                if (days >= 10 && days <= 12)
                                {

                                    <td class="warning text-center">@days</td>
                                }
                                else
                                {
                                    if (days > 12)
                                    {
                                        <td class="danger text-center">@days</td>
                                    }
                                }
                            }

                        }
                        else
                        {
                            <td text-center>Sin iniciar</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
@*</dvi>*@
 <!--graficas-->
<div class="row">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h1 class="panel-title">Resumen general</h1>
        </div>
        <div class="panel-body">
            <div class="row ">
                <div class="col-lg-12">
                    <canvas id="myChart" width="300" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Modal-->
@*<div class="modal fade" id="modalDetail" tabindex="-1" role="dialog" aria-labelledby="myModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div id="myModalContent"></div>
        </div>
    </div>
</div>*@
<div id='myModal' class='modal fade' tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div id='myModalContent'></div>            
        </div>       
    </div>   
</div>

<!--End modal-->
<script>
    var ctx = document.getElementById("myChart");
    var mychart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO","AGOSTO","SEPTIEMBRE","OCTUBRE","NOVIEMBRE","DICIEMBRE"],
            datasets: [
                {
                    label: "Ordenes liberadas dentro de tiempo",
                    fill: true,
                    lineTension: 0.1,
                    backgroundColor: "rgba(24, 194, 41, 0.4)",
                    borderColor: "rgba(13, 164, 56, 1)",
                    borderCapStyle: 'butt',
                    borderDash: [],
                    borderDashOffset: 0.0,
                    borderJoinStyle: 'miter',
                    pointBorderColor: "rgba(75,192,192,1)",
                    pointBackgroundColor: "#fff",
                    pointBorderWidth: 1,
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: "rgba(75,192,192,1)",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointHoverBorderWidth: 2,
                    pointRadius: 1,
                    pointHitRadius: 10,
                    data: [@ViewBag.d1, @ViewBag.d2, @ViewBag.d3, @ViewBag.d4, @ViewBag.d5, @ViewBag.d6,
                        @ViewBag.d7, @ViewBag.d8, @ViewBag.d9, @ViewBag.d710 @ViewBag.d11, @ViewBag.d12],
                    spanGaps: false,
                },
                {
                    label: "Ordenes terminadas fuera de tiempo",
                    fill: true,
                    lineTension: 0.1,
                    backgroundColor: "rgba(207, 29, 29, 0.4)",
                    borderColor: "rgba(164, 22, 13, 1)",
                    borderCapStyle: 'butt',
                    borderDash: [],
                    borderDashOffset: 0.0,
                    borderJoinStyle: 'miter',
                    pointBorderColor: "rgba(75,192,192,1)",
                    pointBackgroundColor: "#fff",
                    pointBorderWidth: 1,
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: "rgba(75,192,192,1)",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointHoverBorderWidth: 2,
                    pointRadius: 1,
                    pointHitRadius: 10,
                    data: [@ViewBag.d13,@ViewBag.d14,@ViewBag.d15,@ViewBag.d16,@ViewBag.d17,@ViewBag.d18,
                        @ViewBag.d19, @ViewBag.d20,@ViewBag.d21,@ViewBag.d22,@ViewBag.d23,@ViewBag.d24],
                    spanGaps: false,
                },
                {
                    label: "Retrasos generados",
                    fill: true,
                    lineTension: 0.1,
                    backgroundColor: "rgba(223, 227, 22, 0.4)",
                    borderColor: "rgba(235, 233, 28, 1)",
                    borderCapStyle: 'butt',
                    borderDash: [],
                    borderDashOffset: 0.0,
                    borderJoinStyle: 'miter',
                    pointBorderColor: "rgba(75,192,192,1)",
                    pointBackgroundColor: "#fff",
                    pointBorderWidth: 1,
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: "rgba(75,192,192,1)",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointHoverBorderWidth: 2,
                    pointRadius: 1,
                    pointHitRadius: 10,
                    data: [@ViewBag.d25,@ViewBag.d26,@ViewBag.d27,@ViewBag.d28,@ViewBag.d29,@ViewBag.d30,@ViewBag.d31,
                    @ViewBag.d32,,@ViewBag.d33,@ViewBag.d34,@ViewBag.d35,@ViewBag.d36],
                    spanGaps: false,
                }
            ]
        },
    });

    var myTime;
    var posY ;
    var max;
    function scrollStart() {
        max = $(document).height() - $(window).height();
        posY = 50;
        //alert(posY);
        myTime = setInterval(Automatico, 2000);
    }

    function scrollStop() {
        clearTimeout(myTime);
    }

    function Automatico() {
        window.scrollTo(0, posY);
        
        if (posY < max) {
            posY = posY + 50;
        }
        else {
            posY = 0;
        }
    }
    function ModeScreen() {
        if (document.getElementById('checkMode').checked) {
            alert("OK");
        }
        else {
            alert("No OK");
        }
    }

    var clicDetect = 0;
    $(document).ready(function () {
        $(".checkbox").change(function () {
            if (clicDetect == 0) {
                clicDetect = 1;
                scrollStart();
            }
            else {
                if (clicDetect == 1) {
                    clicDetect = 0;
                    scrollStop();
                }
            }

            i
        });
    })

    //show the modal(partial view) for orden details
    $(function () {
        $(".showDetail").click(function () {
            var $buttonClicked = $(this);
            var id = $buttonClicked.attr('data-id');
            var options = { "backdrop": "static", keyboard: true };
            $.ajax({
                type:"GET",
                url: "/Home/showDetail",
                contentType: "application/json; charset=utf-8",
                data: { "id": id },
                dataType: "html",
                success: function (data) {
                    $('#myModalContent').html(data);
                    $('myModal').modal(options);
                    $('#myModal').modal('show');
                },
                error: function () {
                    alert("Error al cargar el contenido");
                }
            })
        });
    });

</script>









@*<div class="jumbotron">
    <h1>ASP.NET</h1>
    <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>
    <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Getting started</h2>
        <p>
            ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that
            enables a clean separation of concerns and gives you full control over markup
            for enjoyable, agile development.
        </p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301865">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Get more libraries</h2>
        <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301866">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Web Hosting</h2>
        <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301867">Learn more &raquo;</a></p>
    </div>
</div>*@
@*<div class="container">
    <div class="card card-container">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @using (Html.BeginForm("Login", "Users", FormMethod.Post, new { @class = "form-singin" }))
        {
            <div>
                @Html.TextBoxFor(dl => dl.userEmail, new { @class = "form-control", @placeholder = "Correo electronico" })
                @Html.ValidationMessageFor(dl => dl.userEmail, "", new { @clas = "txt-danger" })
            </div>
            <div>
                @Html.PasswordFor(dl => dl.userPass, new { @class = "from-control", @placeholder = "Contraseña" })
                @Html.ValidationMessageFor(dl => dl.userPass, "", new { @class = "txt-danger" })
            </div>
            <input type="submit" value="Iniciar" class="btn btn-primary" />
        }
    </div>
</div>*@